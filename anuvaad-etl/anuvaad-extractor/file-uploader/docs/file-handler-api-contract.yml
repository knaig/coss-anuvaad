openapi: 3.0.3

info:
  title: Anuvaad File Handler 

  description: |-
    A python based microservice to trigger and orchestrate the file handler part of anuvaad-extractor.

  contact:

    email: nlp-nmt@tarento.com

  license:
    name: MIT License
    url: https://opensource.org/license/mit/

  version: XX.XX.XX

externalDocs:
  description: Find out more of Anuvaad
  url: http://anuvaad.org
  
servers:
  - url: https://users-auth.anuvaad.org/anuvaad-api/file-uploader/
    description: Anuvaad File Uploader

tags:
  - name: File Handler
    description: (APIs related to Uploading file)

paths:

  /v0/upload-file:
    post:
      tags:
        - File Handler
      summary: Upload a file
      description: This api takes a file and uploads it to server.
      requestBody:
        $ref: '#/components/requestBodies/UploadFileBody'
      responses:
        '200':
          description: On successful completion of the uploading file.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              examples:
                example1:
                  $ref: '#/components/examples/UploadFileResponse'
        '400':
          description: On input errors causing failure in creating users.
          $ref: '#/components/responses/Error'
        '404' :
          description: On Connection error.
          $ref: '#/components/responses/ZuulEndpointError'
      security:
        - auth-token: []

  /v0/download-file:
    get:
      tags:
        - File Handler
      summary: download the file
      description: This api takes file name and user id and gives the file.
      parameters:
        - in: path
          name: filename
          schema:
            type: string
            example: Bovids_translated.xlsx
          required: true
          description: The filename to be downloaded
        - in: path
          name: userid
          schema:
            type: string
            example: 1fd9911b7a4940419950v5eab3b163cf1615886263733
          required: true
          description: unique identifier of the user
      responses:
        '200':
          description: successful download of the file
          content:
            application/json:
              schema:
                type: string
                format: binary
        '400':
          description: On input errors causing failure in creating users.
          $ref: '#/components/responses/Error'
        '404' :
          description: On Connection error.
          $ref: '#/components/responses/ZuulEndpointError'
      security:
        - auth-token: []

components:
  
  requestBodies:
  
    UploadFileBody:
      description: A form containing file data.
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              file: 
                type: string
                format: binary
                description: file to be uploaded.

  responses:
    Error:
      description: Error
      content:
        application/json:
          schema:
            type: object
            properties:
              errorID:
                type: string
                description: Unique UUID for the error.
                example: "50cf24e4-5d0a-472d-9d4a-120f9a8fc300"
              code:
                type: string
                description: Unique code signifying the category for the error.
                example: "INVALID CODE"
              message:
                type: string
                description: User readable message pertaining to the error
                example: "sample error message"
              timeStamp:
                type: number
                description: 13 digit epoch timestamp
                example: 1689112383123
              errorType:
                type: string
                description: typr of error
                example: "core-error"
    ZuulEndpointError :
      description: error in connecting upstream zuul application
      content:
        application/json:
          schema:
            type: object
            properties:
              Errors:
                type: array
                items:
                  type: object
                  $ref: '#/components/schemas/Error'
      
  examples:

    UploadFileResponse:
      summary: /v0/upload-file - success
      value:
        ok: "true"
        http:
          status: 200
        why: request successful
        data: a68fd586-93c6-4be5-9c2b-71520b0c2052.docx
        count: 0

  schemas:
      
    
    Error:
      type: object
      properties:
        code:
          type: integer
          description: status code for the error
          example: 404
        message:
          type: string
          description: message info of the code
          example: You're trying to access an invalid/inactive resource
   
    SuccessResponse:
      type: object
      properties:
        ok:
          type: string
          description: true or false 
        http:
          type: object
          properties:
            status:
              type: string
              description: status code of the request
        why:
          type: string
          description: response message
        data:
          type: object
          description: data returned by the request
          nullable: true
        count:
          type: integer
          description: count of data items 
  securitySchemes:
    auth-token:
      type: apiKey
      name: auth-token
      in: header
